#!/usr/bin/env python
from optparse import OptionParser

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from <%= @server_module %>.<%= @mda.py_modulename %> import <%= @mda.py_classname %> as <%= @mda.camelname %>Service
from <%= @server_module %>.<%= @mda.py_modulename %>_conversions import *
from <%= @server_module %>.remote_discipline import *
from <%= @mda.py_modulename %> import <%= @mda.py_classname %>Factory as Factory

class <%= @mda.camelname %>Handler:
    server = None

    def __init__(self):
        factory = Factory()
        <% @mda.all_plain_disciplines.each do |disc| %>
        self.<%= disc.snake_modulename %> = factory.create_<%= disc.snake_modulename %>()
        self.<%= disc.snake_modulename %>.setup()
        <% end %>

    # Admin interface
    def ping(self):
        print("Ping!")

    def shutdown(self):
        print("Shutting down <%= @mda.py_classname %> server...")
        exit(0)

    # <%= @mda.camelname %> interface
    <% @mda.all_plain_disciplines.each do |disc| %>
    def compute_<%= disc.snake_modulename %>(self, ins):
    <% if !disc.local?(@remote_ip) %>
        transport = TSocket.TSocket('<%= disc.endpoint&.host %>', <%= disc.endpoint&.port %>)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        thrift_client = <%= @mda.py_classname %>.Client(protocol)
        transport.open()
        outs = thrift_client.compute_<%= disc.snake_modulename %>(ins)
        transport.close()
        return outs
    <% else %>
        outputs = {}
        inputs = to_openmdao_<%= disc.snake_modulename %>_inputs(ins)
        self.<%= disc.snake_modulename %>.compute(inputs, outputs)
        return to_thrift_<%= disc.snake_modulename %>_output(outputs)
    <% end %>
    <% end %>

parser = OptionParser()
parser.add_option("-p", "--port", type="int",
                  dest="port", default=<%= @server_port %>,
                  help="server listening port number")
(options, args) = parser.parse_args()

handler = <%= @mda.camelname %>Handler()
processor = <%= @mda.camelname %>Service.Processor(handler)
transport = TSocket.TServerSocket('0.0.0.0', port=options.port)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = handler.server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

print("Start <%= @mda.py_classname %> analysis server listening on port {}".format(options.port))
server.serve()
print("done!")
