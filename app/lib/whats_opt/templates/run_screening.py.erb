# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import sys
import numpy as np
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader
from openmdao_extensions.salib_doe_driver import SalibDOEDriver
from SALib.analyze import morris as ma
from SALib.plotting import morris as mp
<% if @remote -%>
from <%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy as <%= @mda.py_classname %> 
<% else -%>
from <%= @mda.py_modulename %> import <%= @mda.py_classname %> 
<% end %>
<%= ERB.new(File.read(File.join(@template_dir, 'options_partial.py.erb')), nil, nil, eoutvar='_sub01').result(binding) %>
pb = Problem(<%= @mda.py_classname %>())
pb.driver = SalibDOEDriver(n_trajs=10, n_levels=4)
case_recorder_filename = '<%= @sqlite_filename %>'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

<% @mda.design_variables.each do |dv| -%>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)
<% end -%>
<% @mda.min_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>')
<% end -%>
<% @mda.max_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>')
<% end -%>
<% @mda.ineq_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', upper=0.)
<% end -%>
<% @mda.eq_constraint_variables.each do |voi| %>
pb.model.add_constraint('<%= voi.name %>', equals=0.)
<% end -%>
pb.setup()  
pb.run_driver()        

<% if @mda.uniq_variables.size < 20 %>
if options.batch:
    exit(0)
reader = CaseReader(case_recorder_filename)
cases = reader.list_cases('root')
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
<% @mda.design_variables.each do |dv| -%>
data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1"?"(1,)":dv.shape %>)
<% end -%>
<% @mda.response_variables.each do |r| -%>
data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1"?"(1,)":r.shape %>)
<% end -%>

for i in range(len(cases)):
    case = reader.get_case(cases[i])
<% @mda.design_variables.each do |dv| -%>
    data['inputs']['<%= dv.name %>'][i,:] = case.inputs['<%= dv.name %>']
<% end -%>
<% @mda.response_variables.each do |r| -%>
    data['outputs']['<%= r.name %>'][i,:] = case.outputs['<%= r.name %>']
<% end -%>

salib_pb = pb.driver.get_salib_problem()
inputs = pb.driver.get_cases()

<% @mda.response_variables.each_with_index do |r, j| -%>
print('*** Output: <%= r.name %>')
output = data['outputs']['<%= r.name %>'].reshape((-1,))
Si = ma.analyze(salib_pb, inputs, output, print_to_console=True)
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('<%= r.name %> '+'sensitivity')
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})

<% end -%>

plt.show()
<% end %>