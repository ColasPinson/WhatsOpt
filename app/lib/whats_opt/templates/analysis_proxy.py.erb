from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from <%= @server_module %>.<%= @mda.py_full_modulename %> import <%= @mda.py_classname %>
from <%= @mda.py_full_modulename %> import <%= @mda.py_classname %> as <%= @mda.py_classname %>Original
<% @mda.all_plain_disciplines.each do |disc| %>
<% if !disc.local?(@remote_ip) or @remote %>
from .remote_discipline import Remote<%= disc.py_classname %>
<% end %>
<% end %>

class <%= @mda.py_classname %>Proxy(<%= @mda.py_classname %>Original):
    
    def __init__(self):
        super(<%= @mda.py_classname %>Proxy, self).__init__()
<% if @remote %>    
        transport = TSocket.TSocket('<%= @server_host %>', <%= @server_port %>)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self._thrift_client = <%= @mda.py_classname %>.Client(protocol)
        transport.open()
<% end %>

<% @mda.all_plain_disciplines.each do |disc| %>
    def create_<%= disc.basename %>(self):
<% if @remote -%>
        return Remote<%= disc.py_classname %>(self._thrift_client)        
<% else -%>
        return super(<%= @mda.py_classname %>Proxy, self).create_<%= disc.basename %>()
<% end -%>
<% end %>

<% unless @server_host.blank? %> 
    def ping(self):
        self._thrift_client.ping()

    def shutdown(self):
        self._thrift_client.shutdown()
<% end %>