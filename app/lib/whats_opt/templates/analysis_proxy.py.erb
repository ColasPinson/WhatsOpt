from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from server.<%= @mda.py_full_modulename %> import <%= @mda.py_classname %>
from <%= @mda.py_full_modulename %>_base import <%= @mda.py_classname %>Base
<% @mda.all_plain_disciplines.each do |disc| %>
from .discipline_proxy import <%= disc.py_classname %>Proxy
<% end %>

class <%= @mda.py_classname %>Proxy(<%= @mda.py_classname %>Base):
    
    def __init__(self):
        super(<%= @mda.py_classname %>Proxy, self).__init__()
        transport = TSocket.TSocket('<%= @server_host %>', <%= @server_port %>)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self._thrift_client = <%= @mda.py_classname %>.Client(protocol)
        transport.open()

    <% @mda.all_plain_disciplines.each do |disc| %>
    def create_<%= disc.basename %>(self):
        return <%= disc.py_classname %>Proxy(self._thrift_client)
    <% end %>

    def ping(self):
        self._thrift_client.ping()

    def shutdown(self):
        self._thrift_client.shutdown()
    