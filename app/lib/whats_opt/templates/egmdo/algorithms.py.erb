import sys
import numpy as np
import pickle
import matplotlib.pyplot as plt
from smt.surrogate_models import KRG

from egmdo.random_analysis import run_random_mda
from egmdo.doe_factory import DoeFactory
from egmdo.gp_factory import GpFactory

def enrich_gp(gp_factory, design_vars, coupling_vars,  disc_index):
    for k in range(len(disc_index)):
    <% @mda.coupling_variables.each_with_index do |cv, i| %>
        <% disc = cv.discipline %>
        if disc_index[k]==<%= i %>:
            gp_factory.update_gp_<%= disc.snake_modulename %>_<%= cv.py_varname %>(design_vars, coupling_vars)
    <%- end -%>

def run_egmda(discipline_factory, design_vars,
              n_doe_pce=500, epsilon_coeff_var=1e-3, n_iter_max=10,
              gp_factory=None, plot=None, trace=None, plot_range=[0, 25]):
    convergence = False
    n_iter = 0
    cv_mean = []
    cv_coeff_var = []

    if not gp_factory:
        gp_factory = GpFactory(DoeFactory(discipline_factory, plot))

    gp_factory.create_all_gps()

    while (not convergence) and (n_iter < n_iter_max):
        # run random MDA
        doe, disc_index, coupling_var_doe = run_random_mda(discipline_factory, gp_factory, design_vars, n_doe_pce)
<%- if @mda.coupling_variables.count == 2 -%>
        if (plot):
            plt.plot(coupling_var_doe[:, 0], coupling_var_doe[:, 1],'+')
<%- [0, 1].each_with_index do |i| -%>
            b_min_<%= i %> = plot_range[0]
            b_max_<%= i %> = plot_range[1]
<%- end %>
<%- @mda.coupling_variables.each_with_index do |cv, i| -%>
<%- disc = cv.discipline -%>
            with open(gp_factory.gp_filename("<%= disc.snake_modulename %>", "<%= cv.py_varname %>"),'rb') as f:
                gp_<%= i %> = pickle.load(f)

            inputs_gp<%= i %> = np.zeros((100, <%= disc.input_variables.map(&:dim).inject(0, :+) %>)) 
<%- index = 0 -%>
<%- disc.input_variables.each_with_index do |var, j| -%>
<%- if @mda.coupling_variables.map(&:name).include?(var.name) -%>
            inputs_gp<%= i %>[:, <%= index %>] = np.linspace(b_min_<%= i %>, b_max_<%= i %>, 100)
<%- else -%>
            inputs_gp<%= i %>[:, <%= index %>:<%= index + var.dim %> ] = design_vars['<%= var.name %>']
<%- end -%>
<%- index = index + var.dim -%>
<%- end -%>
            mean_gp_<%= i %> = gp_<%= i %>.predict_values(inputs_gp<%= i %>)
            std_gp_<%= i %> = np.sqrt(gp_<%= i %>.predict_variances(inputs_gp<%= i %>))
<%- if i == 0 -%>
            plt.plot(mean_gp_0, inputs_gp0[:, 1], 'b')
            plt.plot(mean_gp_0 + 3*std_gp_0, inputs_gp0[:, 1], "b--")
            plt.plot(mean_gp_0 - 3*std_gp_0, inputs_gp0[:, 1], "b--")
<%- else -%>
            plt.plot(inputs_gp1[:, 0], mean_gp_1, 'r')
            plt.plot(inputs_gp1[:, 0], mean_gp_1 + 3*std_gp_1, "r--")
            plt.plot(inputs_gp1[:, 0], mean_gp_1 - 3*std_gp_1, "r--")
<%- end -%>
<%- end -%>
            plt.show()

<% else %>
    if (plot):
        print("Plotting disabled! Plotting requires 2 couplings from surrogates, got <% @mda.coupling_variables.count %>)")

<%- end -%>
        mean = doe[:, -1].mean()
        coeff_var = doe[:, -1].std()/mean
        cv_mean.append(mean)
        cv_coeff_var.append(coeff_var)

        # compute convergence criterion 
        convergence = (coeff_var <= epsilon_coeff_var)
        coupling_vars_values = coupling_var_doe.mean(axis=0)
        coupling_vars = {}
<%- @mda.coupling_variables.each_with_index do |cv, i| -%>
        coupling_vars['<%= cv.py_varname %>'] = coupling_vars_values[<%= i %>]
<%- end -%>      

        # improve the disciplinary gp given by disc_index
        enrich_gp(gp_factory, design_vars, coupling_vars, [disc_index])
        n_iter += 1

    return coupling_vars, cv_mean, cv_coeff_var
