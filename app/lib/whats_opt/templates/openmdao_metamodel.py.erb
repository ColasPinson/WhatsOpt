import os
import re
import numpy as np
import requests

try:
    # Python 3
    from urllib.parse import urlparse
except ImportError:
    # Python 2
    from urlparse import urlparse

<% if @remote %>
WHATSOPT_DIRNAME = os.path.join(os.path.expanduser('~'), '.whatsopt')
API_KEY_FILENAME = os.path.join(WHATSOPT_DIRNAME, 'api_key')
<% end %>

from <%= @discipline.py_full_modulename %>_base import <%= @discipline.py_classname %>Base

class <%= @discipline.py_classname %>(<%= @discipline.py_classname %>Base):
    """ An OpenMDAO metamodel for <%= @discipline.py_classname %> discipline """
		
    def __init__(self, *args, **kwargs):
        super(<%= @discipline.py_classname %>, self).__init__(*args, **kwargs)
        self.url = "<%= @whatsopt_url %>/api/v1/meta_models/<%= @discipline.meta_model.id %>"
        self.session = requests.Session()  
        urlinfos = urlparse(self.url)
        self.session.trust_env = re.match(r"\w+.onera\.fr", urlinfos.netloc)
        <% if @remote %>
        with open(API_KEY_FILENAME, 'r') as f:
            self.api_key = f.read()
        <% else %>
        self.api_key = "<%= @api_key %>"
        <% end %>
        self.headers = {'Authorization': 'Token token=' + self.api_key, 'User-Agent': 'metamodel'}

    def compute(self, inputs, outputs):
        """ <%= @discipline.py_classname %> metamodel computation """
        print("COMPUTE")
        resp = self.session.put(self.url, headers=self.headers, 
            json={"meta_model": 
                    { "format": "matrix", "values": [[3, 5, 7], [6, 10, 1]]
                    }
                 })
        resp.raise_for_status()

