import numpy as np
from <%= @discipline.py_modulename %>_base import <%= @discipline.py_classname %>Base

class <%= @discipline.py_classname %>(<%= @discipline.py_classname %>Base):
    """ An OpenMDAO component to encapsulate <%= @discipline.py_classname %> discipline """
		
    def compute(self, inputs, outputs):
        """ <%= @discipline.py_classname %> computation """
    <% @discipline.output_variables.numeric.each do |var_out| %>
        outputs['<%= var_out.py_varname %>'] = <%= var_out.default_py_value %> <% end %>  
        
# Inputs of compute()
#   <% @discipline.input_variables.numeric.each do |var_in| %>
#       inputs['<%= var_in.py_varname %>'] = <%= var_in.default_py_value -%>
    <% end %>  
	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(<%= @discipline.py_classname %>, self).setup()
#        declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for <%= @discipline.py_classname %> """
#   <% @discipline.output_variables.numeric.each do |var_out| %><% @discipline.input_variables.numeric.each do |var_in| %>
#       	partials['<%= var_out.py_varname %>', '<%= var_in.py_varname %>'] = np.zeros((<%= var_out.dim %>, <%= var_in.dim %>))<% end %><% end %>        
