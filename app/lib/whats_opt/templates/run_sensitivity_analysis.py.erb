# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import sys
import numpy as np
import json
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt

from SALib.analyze import morris as ma
from SALib.plotting import morris as mp

names = []
lower = []
upper = []
inputs = []
<% @input_varcases.each do |vc| %>
names.append("<%= vc.float_varname %>")
#lower += np.array(<%= vc.variable.parameter.lower %>).reshape((-1,)).to_list()
#upper += np.array(<%= vc.variable.parameter.upper %>).reshape((-1,)).to_list()
inputs.append(np.array(<%= vc.values %>))
<% end %>
#bounds = zip(lower, upper)
inputs = np.vstack(inputs)
inputs = inputs.T
salib_pb = {
    'num_vars': len(names),
    'names': names,
    'groups': None,
    'bounds': None
}

result = {}

<% @output_varcases.each do |vc| %>
# <%= vc.float_varname %>
outname = '<%= vc.float_varname %>'
result[outname] = {}
output = np.array(<%= vc.values %>)
Si = ma.analyze(salib_pb, inputs, output, print_to_console=False)
result[outname] = {k:v.tolist() for k, v in Si.items() if isinstance(v, np.ndarray)}
result[outname]['names'] = Si['names']
<% end %>

print(json.dumps(result))
