# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import sys
import numpy as np
import json

<% if @sobol %>
from SALib.analyze import sobol as analyser
<% else %>
from SALib.analyze import morris as analyser
<% end %>

names = []
lower = []
upper = []
inputs = []
<% @input_varcases.each do |vc| %>
names.append("<%= vc.float_varname %>")
inputs.append(np.array(<%= vc.values %>))
<% end %>
#bounds = zip(lower, upper)
inputs = np.vstack(inputs)
inputs = inputs.T
salib_pb = {
    'num_vars': len(names),
    'names': names,
    'groups': None,
    'bounds': None
}

result = {}

<% @output_varcases.each do |vc| %>
# <%= vc.float_varname %>
outname = '<%= vc.float_varname %>'
result[outname] = {}
output = np.array(<%= vc.values %>)
<% if @sobol %>
Si = analyser.analyze(salib_pb, output, calc_second_order=False, print_to_console=False)
<% else %>
Si = analyser.analyze(salib_pb, inputs, output, print_to_console=False)
<% end%>
result_tmp = {k:v for k, v in Si.items() if k is not 'names'}
result[outname] = {k:v.tolist() for k, v in result_tmp.items() if isinstance(v, np.ndarray)}
result[outname]['parameter_names'] = names
<% end %>

sa_result = {'saMethod': "<%= @sobol ? "sobol" : "morris" %>", 'saResult': result}

print(json.dumps(sa_result))
