# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import numpy as np
from packaging import version

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
<% if @impl.nonlinear_solver.reckless? -%>
from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
<% else -%>
from openmdao.api import <%= @impl.nonlinear_solver.name %>
<% end -%>
from openmdao.api import <%= @impl.linear_solver.name %>
from openmdao import __version__ as OPENMDAO_VERSION

<% @mda.sub_analyses.each do |a| -%>
from <%= a.py_full_modulename %> import <%= a.py_classname %>
<% end -%>
<% @mda.all_plain_disciplines.each do |d| -%>
from <%= d.py_full_modulename %> import <%= d.py_classname %>
<% end -%>
<% if @remote -%>
<% @mda.sub_analyses.each do |disc| -%>
from <%= @server_module %>.sub_analysis_proxy import <%= disc.py_classname %>Proxy
<% end -%>
<% end %>
<% @mda.plain_disciplines.each do |disc| %>
<% if @remote || !(@check_only || disc.local?(@remote_ip)) %>
from <%= @server_module %>.remote_discipline import Remote<%= disc.py_classname %>
<% end -%>
<% end -%>

class <%= @mda.py_classname %>Base(<%= @impl.parallel_group ? "ParallelGroup" : "Group" %>):
    """ An OpenMDAO base component to encapsulate <%= @mda.py_classname %> MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(<%= @mda.py_classname %>Base, self). __init__(**kwargs)

        self.nonlinear_solver = <%= @impl.nonlinear_solver.name %>()       
        self.nonlinear_solver.options['atol'] = <%= @impl.nonlinear_solver.atol %>
        self.nonlinear_solver.options['rtol'] = <%= @impl.nonlinear_solver.rtol %>
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.nonlinear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:nonlinear_solver, :err_on_non_converge) %>
            if version.parse(OPENMDAO_VERSION) > version.parse("2.9.1"):
                self.nonlinear_solver.options['reraise_child_analysiserror'] = False 
        else:
            self.nonlinear_solver.options['err_on_maxiter'] = <%= @impl.to_code(:nonlinear_solver, :err_on_non_converge) %>
        self.nonlinear_solver.options['iprint'] = <%= @impl.nonlinear_solver.iprint %>

        self.linear_solver = <%= @impl.linear_solver.name %>()       
        self.linear_solver.options['atol'] = <%= @impl.linear_solver.atol %>
        self.linear_solver.options['rtol'] = <%= @impl.linear_solver.rtol %>
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.linear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:linear_solver, :err_on_non_converge) %>
        else:
            self.linear_solver.options['err_on_maxiter'] = <%= @impl.to_code(:linear_solver, :err_on_non_converge) %>        
        self.linear_solver.options['iprint'] = <%= @impl.linear_solver.iprint %>
<% if @remote %>
        self._thrift_client = thrift_client
<% end -%>

    def setup(self): 
<% if @mda.is_root_analysis? && @mda.input_variables.size > 0 -%>
        indeps = self.add_subsystem('indeps', IndepVarComp(), promotes=['*'])
<% @mda.input_variables.each do |dv| %>
        indeps.add_output('<%= dv.name %>', <%= dv.init_py_value %>)<% end -%>
<% end -%>
<% @mda.disciplines.nodes.each do |d| %>
        self.add_subsystem('<%= d.py_classname %>', self.create_<%= d.basename %>(), promotes=[<%= d.variables.map(&:py_varname).map{|v| "'#{v}'"}.join(', ') %>])<% end -%>

<% @mda.sub_analyses.each do |a| %>
    def create_<%= a.basename %>(self):
<% if @remote %>
        return <%= a.py_classname %>Proxy(self._thrift_client)
<% else -%>
    	return <%= a.py_classname %>()
<% end %>
<% end %>
<% @mda.plain_disciplines.each do |disc| -%>
    def create_<%= disc.basename %>(self):
<% if !(@check_only || disc.local?(@remote_ip)) -%>
        return Remote<%= disc.py_classname %>()
<% else -%>
    	return <%= disc.py_classname %>()
<% end -%>
<% end %>

# Used by Thrift server to serve disciplines
class <%= @mda.py_classname %>FactoryBase(object):
<% @mda.all_plain_disciplines.each do |disc| -%>
    @staticmethod
    def create_<%= disc.snake_modulename %>():
    	return <%= disc.py_classname %>()
<% end %>