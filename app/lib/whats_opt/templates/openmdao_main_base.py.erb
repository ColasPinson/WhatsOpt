<%= @generator.render_partial('base_header_partial.py.erb') %>

import numpy as np
from numpy import nan

import openmdao.api as om
<% if @impl.nonlinear_solver.reckless? -%>
from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
<% else -%>
from openmdao.api import <%= @impl.nonlinear_solver.name %>
<% end -%>
from openmdao.api import <%= @impl.linear_solver.name %>
from openmdao import __version__ as OPENMDAO_VERSION

<% @mda.sub_analyses.each do |a| -%>
from <%= a.py_full_modulename %> import <%= a.py_classname %>
<% end -%>

<% @mda.all_plain_disciplines.each do |disc| -%>
<% if @check_only || disc.local?(@remote_ip) -%>
from <%= disc.py_full_modulename %> import <%= disc.py_classname %> 
<% else %>
from <%= @server_module %>.remote_discipline import Remote<%= disc.py_classname %>
<% end -%>
<% end -%>

class <%= @mda.py_classname %>FactoryBase():
    """ 
    A factory for all plain disciplines of <%= @mda.name %> analysis.

    User can override methods in a subclass to take control over disciplines creation 
    and pass that subclass to the analysis constructor.
    """
<% @mda.all_plain_disciplines.each do |disc| %>
    def create_<%= disc.snake_modulename %>(self):
<% if (@check_only || disc.local?(@remote_ip)) -%>
        return <%= disc.py_classname %>()
<% else -%>
        """ 
        <%= disc.py_classname %> is expected to be run on remote host <%= disc.host %>.
        """
        return Remote<%= disc.py_classname %>()
<% end -%>
<% end %>

class <%= @mda.py_classname %>Base(<%= @impl.parallel_group ? "om.ParallelGroup" : "om.Group" %>):
    """ An OpenMDAO base component to encapsulate <%= @mda.py_classname %> MDA """
    def __init__(self, factory=<%= @mda.py_classname %>FactoryBase()):
        """
        Parameters
        ----------
            factory: Subclass of <%= @mda.py_classname %>Factory 
            Used to control disciplines creation (default to <%= @mda.py_classname %>FactoryBase)
        """
        super(). __init__()
        self._factory = factory

        self.nonlinear_solver = <%= @impl.nonlinear_solver.name %>()
<% unless @impl.nonlinear_solver.runonce? -%>
        self.nonlinear_solver.options['atol'] = <%= @impl.nonlinear_solver.atol %>
        self.nonlinear_solver.options['rtol'] = <%= @impl.nonlinear_solver.rtol %>
        self.nonlinear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:nonlinear_solver, :err_on_non_converge) %>
        self.nonlinear_solver.options['reraise_child_analysiserror'] = False
<% end -%>

        self.linear_solver = <%= @impl.linear_solver.name %>()
        self.linear_solver.options['atol'] = <%= @impl.linear_solver.atol %>
        self.linear_solver.options['rtol'] = <%= @impl.linear_solver.rtol %>
        self.linear_solver.options['err_on_non_converge'] = <%= @impl.to_code(:linear_solver, :err_on_non_converge) %>
        self.linear_solver.options['iprint'] = <%= @impl.linear_solver.iprint %>

    def setup(self):<% @mda.input_variables.each do |dv| %>
        self.set_input_defaults('<%= dv.name %>', val=<%= dv.init_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)<% end -%>
<% @mda.disciplines.nodes.each do |d| %>
        self.add_subsystem('<%= d.py_classname %>', self.create_<%= d.basename %>(),
                           promotes=[<%= d.variables.map(&:py_varname).map{|v| "'#{v}'"}.join(', ') %>])<% end -%>

<% @mda.sub_analyses.each do |a| %>
    def create_<%= a.basename %>(self):
        """ 
        User can override this method in a subclass 
        to take control over <%= a.py_classname %> sub analysis creation.
        """
        return <%= a.py_classname %>(factory=self._factory)
<% end -%>
<% @mda.plain_disciplines.each do |disc| %>
    def create_<%= disc.basename %>(self):
        return self._factory.create_<%= disc.snake_modulename %>()
<% end %>

