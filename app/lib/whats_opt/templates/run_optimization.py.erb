# DO NOT EDIT unless you know what you are doing
# analysis_id: <%= @mda.id %>

import sys
import numpy as np
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader, ScipyOptimizeDriver
<% if @remote -%>
from <%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy as <%= @mda.py_classname %> 
<% else -%>
from <%= @mda.py_modulename %> import <%= @mda.py_classname %> 
<% end %>
<%= ERB.new(File.read(File.join(@template_dir, 'options_partial.py.erb')), nil, nil, eoutvar='_sub01').result(binding) %>
pb = Problem(<%= @mda.py_classname %>())
pb.driver = ScipyOptimizeDriver()
pb.driver.options['optimizer'] = 'SLSQP'
pb.driver.options['tol'] = 1e-6
pb.driver.options['disp'] = True
pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs']

case_recorder_filename = '<%= @sqlite_filename %>'
print(case_recorder_filename)        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

# Derivatives are compute via finite-difference method
# to be commnented out if partial derivatives are declared
pb.model.approx_totals(method='fd', step=1e-6, form='central')

<%- @mda.design_variables.each do |dv| %>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)<% end %>
<% @mda.min_objective_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>')<% end %>
<% @mda.max_objective_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>', scaler=-1)<% end %>
<% @mda.ineq_constraint_variables.each do |voi| %>
pb.model.add_constraint('<%= voi.name %>', upper=0.)<% end %>
<% @mda.eq_constraint_variables.each do |voi| %>
pb.model.add_constraint('<%= voi.name %>', equals=0.)<% end %>
pb.setup()  
pb.run_driver()      

if options.batch:
    exit(0)  
reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
<% @mda.design_variables.each do |dv| %>
data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1"?"(1,)":dv.shape %>)<% end %>
<% @mda.response_variables.each do |r| %>
data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1"?"(1,)":r.shape %>)<% end %>

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)
<% @mda.design_variables.each do |dv| -%>
    data['inputs']['<%= dv.name %>'][i,:] = case.inputs['<%= dv.name %>']
<% end -%>
<% @mda.response_variables.each do |r| -%>
    data['outputs']['<%= r.name %>'][i,:] = case.outputs['<%= r.name %>']
<% end -%>
      
