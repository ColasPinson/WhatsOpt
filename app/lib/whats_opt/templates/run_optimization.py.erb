import numpy as np
from numpy import nan, inf
# import matplotlib
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
from run_parameters_init import initialize
<% if @driver.onerasego? %>
from openmdao_extensions.onera_sego_driver import OneraSegoDriver
<% end %>

import openmdao.api as om
<% if @egmdo %>
from <%= @egmdo_module %>.<%= @mda.py_modulename %>_egmda import <%= @mda.py_classname %>Egmda as <%= @mda.py_classname %>
<%- if @remote -%>
from <%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy
<% end %>
<% elsif @remote -%>
from <%= @server_module %>.<%= @mda.py_modulename %>_proxy import <%= @mda.py_classname %>Proxy as <%= @mda.py_classname %>
<% else -%>
from <%= @mda.py_modulename %> import <%= @mda.py_classname %>
<% end -%>

<% if @egmdo && @remote %>
pb = om.Problem(<%= @mda.py_classname %>(discipline_factory=<%= @mda.py_classname %>Proxy()))
<% else %>
pb = om.Problem(<%= @mda.py_classname %>())
<% end %>

<% if @driver.pyoptsparse? -%>
class NamedPyOptSparseDriver(om.pyOptSparseDriver):
    def _get_name(self):
        return '<%= "pyoptsparse_optimizer_#{@driver.algo_option.downcase}" %>'

pb.driver = NamedPyOptSparseDriver()
<% elsif @driver.onerasego? -%>
pb.driver = OneraSegoDriver()
<% else -%>
class NamedScipyOptimizeDriver(om.ScipyOptimizeDriver):
    def _get_name(self):
        return '<%= "scipy_optimizer_#{@driver.algo_option.downcase}" %>'
pb.driver = NamedScipyOptimizeDriver()
<% end -%>
pb.driver.options['optimizer'] = '<%= @driver.algo_option %>'
<% @driver.options.each do |k, v|%>
pb.driver.options['<%= k %>'] = <%= v %>
<% end -%>
<% @driver.opt_settings.each do |k, v|%>
pb.driver.opt_settings['<%= k %>'] = <%= v %>
<% end -%>
#pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs', 'totals']
pb.driver.options['debug_print'] = []

case_recorder_filename = '<%= @sqlite_filename %>'
recorder = om.SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.driver.recording_options['includes'] = ['*']

<% unless @driver.onerasego? -%>
# Derivatives are compute via finite-difference method
# to be commented out if partial derivatives are declared
pb.model.approx_totals(method='fd', step=1e-6, form='central')
<% end -%>

<%- if @mda.design_variables.empty? -%>
print("Error: You have to select some design variables then update (-r) update the run_optimization.py script and retry.")
exit(-1)
<%- end -%>
<%- @mda.design_variables.each do |dv| -%>
<%- if dv.lower_py_value == "-inf" ||  dv.upper_py_value == "inf" -%>
print("Error: You have to set bounds to the '<%= dv.name %>' design variable then update the run_optimization.py script code and retry.")
exit(-1)
<%- end -%>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %><%= @impl.use_units && !dv.units.blank? ? ", units='#{dv.units}'":"" %>)
<%- end -%>

<% @mda.min_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>'<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.max_objective_variables.each do |voi| -%>
pb.model.add_objective('<%= voi.name %>', scaler=-1<%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.neg_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.pos_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.eq_constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', equals=<%= voi.cstr_init_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>
<%- @mda.constraint_variables.each do |voi| -%>
pb.model.add_constraint('<%= voi.name %>', lower=<%= voi.cstr_lower_py_value %>, upper=<%= voi.cstr_upper_py_value %><%= @impl.use_units && !voi.units.blank? ? ", units='#{voi.units}'":"" %>)
<%- end -%>

pb.setup()
initialize(pb)

pb.run_driver()

<%- @mda.design_variables.each do |dv| %>
print("<%= dv.name %>= {}".format(pb['<%= dv.name %>']))<% end %>

# cr = om.CaseReader(case_recorder_filename)
# sources = cr.list_sources()
# print(sources)

# cases = cr.list_cases("driver")
# print(cases)

# for i in range(len(cases)):
#     obj = cases[i]
#     print(obj)