require 'test_helper'
require 'whats_opt/openmdao_generator'
require 'whats_opt/openmdao_mapping'
require 'tmpdir'

class FakeVar < Struct.new(:name, :type, :shape, :desc)
  include WhatsOpt::OpenmdaoVariable  
  def dim
    return 1
  end
end

class FakeDiscipline < Struct.new(:name, :input_variables, :output_variables)
  include WhatsOpt::OpenmdaoModule 
  def variables
    self.input_variables + self.output_variables
  end
end

class FakeMda < Struct.new(:name, :disciplines)
  include WhatsOpt::OpenmdaoModule 
end

class OpenmdaoGeneratorTest < ActiveSupport::TestCase

  def setup
    @mda = 
      FakeMda.new('Cicav', [
        FakeDiscipline.new('Geometry',
                           [FakeVar.new('x1', FakeVar::FLOAT_T, '1'), FakeVar.new('y2', FakeVar::FLOAT_T, '1'), FakeVar.new('z', FakeVar::FLOAT_T, '1')],
                           [FakeVar.new('x2', FakeVar::FLOAT_T, '1'), FakeVar.new('y1', FakeVar::FLOAT_T, '1')]),
        FakeDiscipline.new('Aerodynamics',
                           [FakeVar.new('x3', FakeVar::FLOAT_T, '1'), FakeVar.new('y1', FakeVar::FLOAT_T, '1'), FakeVar.new('z', FakeVar::FLOAT_T, '1')],
                           [FakeVar.new('y3', FakeVar::FLOAT_T, '1'), FakeVar.new('y2', FakeVar::FLOAT_T, '1')])
                           ])
    @ogen = WhatsOpt::OpenmdaoGenerator.new(@mda)
  end
    
  test "should generate openmdao component for a given discipline an mda" do
    Dir.mktmpdir do |dir|
      disc = @mda.disciplines[0]
      filepath = @ogen._generate_discipline disc, dir
      assert File.exists?(filepath)
    end
  end
  
  test "should generate openmdao process for an mda" do
    Dir.mktmpdir do |dir|
      filepath = @ogen._generate_mda dir
      assert File.exists?(filepath)
    end
  end
  
  test "should maintain a list of generated filepaths" do
    Dir.mktmpdir do |dir|
      filepath = @ogen._generate_mda dir
      basenames = @ogen.genfiles.map {|fp| File.basename(fp)}
      assert_equal 3, basenames.length
      assert_includes basenames,"geometry.py"
      assert_includes basenames,"aerodynamics.py"
      assert_includes basenames,"cicav.py"
    end
  end 
  
  test "should generate openmdao mda zip file" do
    zippath = Tempfile.new('test_mda_file.zip')
    File.open(zippath, 'w') do |f|
      stringio, _ = @ogen.generate_zip
      f.write stringio.read
    end
    assert File.exists?(zippath)
    Zip::File.open(zippath) do |zip|
      zip.each do |entry|
        assert entry.file?
        assert entry.get_input_stream.read =~
          Regexp.new(Regexp.escape('generated by WhatsOpt'), Regexp::MULTILINE)
      end
    end
  end 
  
end