require 'test_helper'
require 'whats_opt/server_generator'
require 'tmpdir'

class ServerGeneratorTest < ActiveSupport::TestCase

  def setup
    @mda = analyses(:cicav)
    @sgen = WhatsOpt::ServerGenerator.new(@mda)
  end

#  test "should generate server code for an analysis" do
#    Dir.mktmpdir do |dir|
#      filepath = @sgen._generate_code dir
#      assert File.exists?(filepath)
#    end
#  end
  
  test "should use thrift command to generate thrift code" do
    Dir.mktmpdir do |dir|
      ok, log = @sgen._generate_with_thrift("/tmp")
      print log
      assert ok
    end
  end
  
#  test "should maintain a list of generated filepaths" do
#    Dir.mktmpdir do |dir|
#      filepath = @ogen._generate_code dir
#      basenames = @ogen.genfiles.map {|fp| File.basename(fp)}.sort
#      expected = []
#      assert_equal expected, basenames
#    end
#  end 
#  
#  test "should generate server zip file" do
#    zippath = Tempfile.new('test_server_file.zip')
#    File.open(zippath, 'w') do |f|
#      content, _ = @ogen.generate
#      f.write content
#    end
#    assert File.exists?(zippath)
#    Zip::File.open(zippath) do |zip|
#      zip.each do |entry|
#        assert entry.file?
#        assert entry.get_input_stream.read =~
#          Regexp.new(Regexp.escape('generated by WhatsOpt'), Regexp::MULTILINE)
#      end
#    end
#  end 
#
#  test "should generate openmdao mda zip base files" do
#    zippath = Tempfile.new('test_mda_file.zip')
#    File.open(zippath, 'w') do |f|
#      content, _ = @ogen.generate(only_base=true)
#      f.write content
#    end
#    assert File.exists?(zippath)
#    Zip::File.open(zippath) do |zip|
#      zip.each do |entry|
#        assert_match /_base\.py|run_\w+\.py/, entry.name
#      end
#    end
#  end 
  
end