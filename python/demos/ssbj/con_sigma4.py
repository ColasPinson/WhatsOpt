# -*- coding: utf-8 -*-
"""
  con_sigma4.py generated by WhatsOpt. 
"""
from con_sigma4_base import ConSigma4Base

class ConSigma4(ConSigma4Base):
    """ An OpenMDAO component to encapsulate ConSigma4 discipline """
	
    def __init__(self, scalers):
        super(ConSigma4, self).__init__()
        self.scalers=scalers

    def compute(self, inputs, outputs):
        """ ConSigma4 computation """
    
        outputs['con_sigma4'] = inputs['sigma'][3]*self.scalers['sigma'][3]-1.9  


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConSigma4, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConSigma4 """
    
   		
#       	partials['con_sigma4', 'sigma'] = np.zeros((1, 5))        
