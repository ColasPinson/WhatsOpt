# -*- coding: utf-8 -*-
"""
  ssbj_mda.py generated by WhatsOpt. 
"""

from openmdao.api import Problem
from ssbj_mda_base import SsbjMdaBase
from openmdao.api import view_model
from optparse import OptionParser

from ssbj_openmdao.ssbj_mda import init_ssbj_mda
from sap_struc import SapStruc
from sap_aero import SapAero
from sap_propu import SapPropu
from perfo import Perfo
from con_theta_sup import ConThetaSup
from con_theta_inf import ConThetaInf
from con_sigma1 import ConSigma1
from con_sigma2 import ConSigma2
from con_sigma3 import ConSigma3
from con_sigma4 import ConSigma4
from con_sigma5 import ConSigma5
from con_dpdx import ConDpdx
from con1_esf import Con1Esf
from con2_esf import Con2Esf
from con_temp import ConTemp
from con_dt import ConDt

class SsbjMda(SsbjMdaBase):
    """ An OpenMDAO base component to encapsulate SsbjMda MDA """
    
    def __init__(self):
        super(SsbjMda, self).__init__()
        self.scalers = init_ssbj_mda()

    def createSapStruc(self):
        return SapStruc(self.scalers)
    
    def createSapAero(self):
        return SapAero(self.scalers)
    
    def createSapPropu(self):
        return SapPropu(self.scalers)
    
    def createPerfo(self):
        return Perfo(self.scalers)
    
    def createConThetaSup(self):
        return ConThetaSup(self.scalers)
    
    def createConThetaInf(self):
        return ConThetaInf(self.scalers)
    
    def createConSigma1(self):
        return ConSigma1(self.scalers)
    
    def createConSigma2(self):
        return ConSigma2(self.scalers)
    
    def createConSigma3(self):
        return ConSigma3(self.scalers)
    
    def createConSigma4(self):
        return ConSigma4(self.scalers)
    
    def createConSigma5(self):
        return ConSigma5(self.scalers)
    
    def createConDpdx(self):
        return ConDpdx(self.scalers)
    
    def createCon1Esf(self):
        return Con1Esf(self.scalers)
    
    def createCon2Esf(self):
        return Con2Esf(self.scalers)
    
    def createConTemp(self):
        return ConTemp(self.scalers)
    
    def createConDt(self):
        return ConDt(self.scalers)


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-n", "--no-n2", action="store_false", dest='n2_view', default=True, 
                      help="display N2 openmdao viewer")
    (options, args) = parser.parse_args()

    problem = Problem()
    problem.model = SsbjMda()

    problem.setup()
    problem.final_setup()
    
    if options.n2_view:
        view_model(problem)
    