# -*- coding: utf-8 -*-
"""
  con_dt.py generated by WhatsOpt. 
"""
from con_dt_base import ConDtBase

class ConDt(ConDtBase):
    """ An OpenMDAO component to encapsulate ConDt discipline """
	
    def __init__(self, scalers):
        super(ConDt, self).__init__()
        self.scalers=scalers

    def compute(self, inputs, outputs):
        """ ConDt computation """
        DT = inputs['DT']*self.scalers['DT']

        outputs['con_dt'] = DT 


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConDt, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConDt """
    
   		
#       	partials['con_dt', 'DT'] = np.zeros((1, 1))        
