# -*- coding: utf-8 -*-
"""
  con1_esf.py generated by WhatsOpt. 
"""
from con1_esf_base import Con1EsfBase

class Con1Esf(Con1EsfBase):
    """ An OpenMDAO component to encapsulate Con1Esf discipline """
		
    def __init__(self, scalers):
        super(Con1Esf, self).__init__()
        self.scalers=scalers

    def compute(self, inputs, outputs):
        """ Con1Esf computation """
        ESF = inputs['ESF']*self.scalers['ESF']

        outputs['con1_esf'] = ESF-1.5

	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(Con1Esf, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Con1Esf """
    
   		
#       	partials['con1_esf', 'ESF'] = np.zeros((1, 1))        
