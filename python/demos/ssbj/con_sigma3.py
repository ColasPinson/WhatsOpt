# -*- coding: utf-8 -*-
"""
  con_sigma3.py generated by WhatsOpt. 
"""
from con_sigma3_base import ConSigma3Base

class ConSigma3(ConSigma3Base):
    """ An OpenMDAO component to encapsulate ConSigma3 discipline """
    
    def __init__(self, scalers):
    	super(ConSigma3, self).__init__()
        self.scalers=scalers	
		
    def compute(self, inputs, outputs):
        """ ConSigma3 computation """
    
        outputs['con_sigma3'] = inputs['sigma'][2]*self.scalers['sigma'][2]-1.9  

	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConSigma3, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConSigma3 """
    
   		
#       	partials['con_sigma3', 'sigma'] = np.zeros((1, 5))        
