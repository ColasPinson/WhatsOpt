# -*- coding: utf-8 -*-
"""
  con2_esf.py generated by WhatsOpt. 
"""
from con2_esf_base import Con2EsfBase

class Con2Esf(Con2EsfBase):
    """ An OpenMDAO component to encapsulate Con2Esf discipline """

    def __init__(self, scalers):
        super(Con2Esf, self).__init__()
        self.scalers=scalers

    def compute(self, inputs, outputs):
        """ Con2Esf computation """
        ESF = inputs['ESF']*self.scalers['ESF']

        outputs['con2_esf'] = 0.5-ESF  


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(Con2Esf, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Con2Esf """
    
   		
#       	partials['con2_esf', 'ESF'] = np.zeros((1, 1))        
