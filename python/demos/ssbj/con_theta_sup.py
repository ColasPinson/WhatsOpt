# -*- coding: utf-8 -*-
"""
  con_theta_sup.py generated by WhatsOpt. 
"""
from con_theta_sup_base import ConThetaSupBase

class ConThetaSup(ConThetaSupBase):
    """ An OpenMDAO component to encapsulate ConThetaSup discipline """

    def __init__(self, scalers):
    	super(ConThetaSup, self).__init__()
        self.scalers=scalers
		
    def compute(self, inputs, outputs):
        """ ConThetaSup computation """
    
        outputs['con_Theta_up'] = inputs['Theta']*self.scalers['Theta']-1.04 

	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConThetaSup, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConThetaSup """
    
   		
#       	partials['con_Theta_up', 'Theta'] = np.zeros((1, 1))        
