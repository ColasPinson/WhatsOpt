# -*- coding: utf-8 -*-
"""
  sap_propu.py generated by WhatsOpt. 
"""
from sap_propu_base import SapPropuBase
from ssbj_openmdao.disciplines.propulsion import Propulsion

class SapPropu(SapPropuBase):
    """ An OpenMDAO component to encapsulate SapPropu discipline """
		   
    def __init__(self, scalers):
        super(SapPropu, self).__init__()
        self.propu = Propulsion(scalers)

    def compute(self, inputs, outputs):
        """ SapStruc computation """    
        self.propu.compute(inputs, outputs)


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(SapPropu, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for SapPropu """
    
   		
#       	partials['SFC', 'D'] = np.zeros((1, 1))
#       	partials['SFC', 'x_pro'] = np.zeros((1, 1))
#       	partials['SFC', 'z'] = np.zeros((1, 6))
   		
#       	partials['ESF', 'D'] = np.zeros((1, 1))
#       	partials['ESF', 'x_pro'] = np.zeros((1, 1))
#       	partials['ESF', 'z'] = np.zeros((1, 6))
   		
#       	partials['DT', 'D'] = np.zeros((1, 1))
#       	partials['DT', 'x_pro'] = np.zeros((1, 1))
#       	partials['DT', 'z'] = np.zeros((1, 6))
   		
#       	partials['Temp', 'D'] = np.zeros((1, 1))
#       	partials['Temp', 'x_pro'] = np.zeros((1, 1))
#       	partials['Temp', 'z'] = np.zeros((1, 6))
   		
#       	partials['WE', 'D'] = np.zeros((1, 1))
#       	partials['WE', 'x_pro'] = np.zeros((1, 1))
#       	partials['WE', 'z'] = np.zeros((1, 6))        
