# -*- coding: utf-8 -*-
"""
  ssbj_mda_base.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 47

import numpy as np
from openmdao.api import Problem, Group
from openmdao.api import IndepVarComp
from openmdao.api import NonlinearBlockGS, ScipyKrylov

from sap_struc import SapStruc
from sap_aero import SapAero
from sap_propu import SapPropu
from perfo import Perfo
from con_theta_sup import ConThetaSup
from con_theta_inf import ConThetaInf
from con_sigma1 import ConSigma1
from con_sigma2 import ConSigma2
from con_sigma3 import ConSigma3
from con_sigma4 import ConSigma4
from con_sigma5 import ConSigma5
from con_dpdx import ConDpdx
from con1_esf import Con1Esf
from con2_esf import Con2Esf
from con_temp import ConTemp
from con_dt import ConDt

class SsbjMdaBase(Group):
    """ An OpenMDAO base component to encapsulate SsbjMda MDA """
    
    def setup(self): 
    
    
        indeps = self.add_subsystem('indeps', IndepVarComp(), promotes=['*'])
		
        indeps.add_output('z', 6*[1])
        indeps.add_output('x_aer', 1)
        indeps.add_output('x_pro', 1)
        indeps.add_output('x_str', 2*[1])		    
 		
 		
        self.add_subsystem('SapStruc', self.createSapStruc(), promotes=['WF', 'WT', 'sigma', 'Theta', 'L', 'WE', 'x_str', 'z'])
        self.add_subsystem('SapAero', self.createSapAero(), promotes=['fin', 'dpdx', 'ESF', 'Theta', 'WT', 'x_aer', 'z', 'D', 'L'])
        self.add_subsystem('SapPropu', self.createSapPropu(), promotes=['SFC', 'ESF', 'DT', 'Temp', 'D', 'x_pro', 'z', 'WE'])
        self.add_subsystem('Perfo', self.createPerfo(), promotes=['SFC', 'WF', 'WT', 'fin', 'z', 'R'])
        self.add_subsystem('ConThetaSup', self.createConThetaSup(), promotes=['Theta', 'con_Theta_up'])
        self.add_subsystem('ConThetaInf', self.createConThetaInf(), promotes=['Theta', 'con_Theta_low'])
        self.add_subsystem('ConSigma1', self.createConSigma1(), promotes=['sigma', 'con_sigma1'])
        self.add_subsystem('ConSigma2', self.createConSigma2(), promotes=['sigma', 'con_sigma2'])
        self.add_subsystem('ConSigma3', self.createConSigma3(), promotes=['sigma', 'con_sigma3'])
        self.add_subsystem('ConSigma4', self.createConSigma4(), promotes=['sigma', 'con_sigma4'])
        self.add_subsystem('ConSigma5', self.createConSigma5(), promotes=['sigma', 'con_sigma5'])
        self.add_subsystem('ConDpdx', self.createConDpdx(), promotes=['dpdx', 'con_dpdx'])
        self.add_subsystem('Con1Esf', self.createCon1Esf(), promotes=['ESF', 'con1_esf'])
        self.add_subsystem('Con2Esf', self.createCon2Esf(), promotes=['ESF', 'con2_esf'])
        self.add_subsystem('ConTemp', self.createConTemp(), promotes=['Temp', 'con_temp'])
        self.add_subsystem('ConDt', self.createConDt(), promotes=['DT', 'con_dt'])         

        self.nonlinear_solver = NonlinearBlockGS() 
        self.linear_solver = ScipyKrylov()

    
    def createSapStruc(self):
    	return SapStruc()
    
    def createSapAero(self):
    	return SapAero()
    
    def createSapPropu(self):
    	return SapPropu()
    
    def createPerfo(self):
    	return Perfo()
    
    def createConThetaSup(self):
    	return ConThetaSup()
    
    def createConThetaInf(self):
    	return ConThetaInf()
    
    def createConSigma1(self):
    	return ConSigma1()
    
    def createConSigma2(self):
    	return ConSigma2()
    
    def createConSigma3(self):
    	return ConSigma3()
    
    def createConSigma4(self):
    	return ConSigma4()
    
    def createConSigma5(self):
    	return ConSigma5()
    
    def createConDpdx(self):
    	return ConDpdx()
    
    def createCon1Esf(self):
    	return Con1Esf()
    
    def createCon2Esf(self):
    	return Con2Esf()
    
    def createConTemp(self):
    	return ConTemp()
    
    def createConDt(self):
    	return ConDt()
    