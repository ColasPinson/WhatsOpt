# -*- coding: utf-8 -*-
"""
  con_temp.py generated by WhatsOpt. 
"""
from con_temp_base import ConTempBase

class ConTemp(ConTempBase):
    """ An OpenMDAO component to encapsulate ConTemp discipline """

    def __init__(self, scalers):
    	super(ConTemp, self).__init__()
        self.scalers=scalers
		
    def compute(self, inputs, outputs):
        """ ConTemp computation """
    
        outputs['con_temp'] = inputs['Temp']*self.scalers['Temp']-1.02


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConTemp, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConTemp """
    
   		
#       	partials['con_temp', 'Temp'] = np.zeros((1, 1))        
