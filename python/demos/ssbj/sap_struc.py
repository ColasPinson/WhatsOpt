# -*- coding: utf-8 -*-
"""
  sap_struc.py generated by WhatsOpt. 
"""
from sap_struc_base import SapStrucBase
from ssbj_openmdao.disciplines.structure import Structure

class SapStruc(SapStrucBase):
    """ An OpenMDAO component to encapsulate SapStruc discipline """
		
    def __init__(self, scalers):
        super(SapStruc, self).__init__()
        self.struc = Structure(scalers)

    def compute(self, inputs, outputs):
        """ SapStruc computation """    
        self.struc.compute(inputs, outputs)


	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(SapStruc, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for SapStruc """
    
   		
#       	partials['WF', 'L'] = np.zeros((1, 1))
#       	partials['WF', 'WE'] = np.zeros((1, 1))
#       	partials['WF', 'x_str'] = np.zeros((1, 2))
#       	partials['WF', 'z'] = np.zeros((1, 6))
   		
#       	partials['WT', 'L'] = np.zeros((1, 1))
#       	partials['WT', 'WE'] = np.zeros((1, 1))
#       	partials['WT', 'x_str'] = np.zeros((1, 2))
#       	partials['WT', 'z'] = np.zeros((1, 6))
   		
#       	partials['sigma', 'L'] = np.zeros((5, 1))
#       	partials['sigma', 'WE'] = np.zeros((5, 1))
#       	partials['sigma', 'x_str'] = np.zeros((5, 2))
#       	partials['sigma', 'z'] = np.zeros((5, 6))
   		
#       	partials['Theta', 'L'] = np.zeros((1, 1))
#       	partials['Theta', 'WE'] = np.zeros((1, 1))
#       	partials['Theta', 'x_str'] = np.zeros((1, 2))
#       	partials['Theta', 'z'] = np.zeros((1, 6))        
