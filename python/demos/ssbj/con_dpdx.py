# -*- coding: utf-8 -*-
"""
  con_dpdx.py generated by WhatsOpt. 
"""
from con_dpdx_base import ConDpdxBase

class ConDpdx(ConDpdxBase):
    """ An OpenMDAO component to encapsulate ConDpdx discipline """
    def __init__(self, scalers):
        super(ConDpdx, self).__init__()
        self.scalers=scalers

    def compute(self, inputs, outputs):
        """ ConDpdx computation """
        dpdx = inputs['dpdx']*self.scalers['dpdx']
    	
        outputs['con_dpdx'] = dpdx-1.04

	
# To declare partial derivatives computation ...
# 
#    def setup()
#        super(ConDpdx, self).setup()
#        declare_partials('*', '*')  
			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ConDpdx """
    
   		
#       	partials['con_dpdx', 'dpdx'] = np.zeros((1, 1))        
