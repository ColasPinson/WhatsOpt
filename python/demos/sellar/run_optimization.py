# -*- coding: utf-8 -*-
"""
  run_optimization.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 48

import sys
import numpy as np
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader, ScipyOptimizeDriver

from sellar import Sellar 


pb = Problem(Sellar())
pb.driver = ScipyOptimizeDriver()
pb.driver.options['optimizer'] = 'SLSQP'
pb.driver.options['tol'] = 1e-6
pb.driver.options['disp'] = True
pb.driver.options['debug_print'] = ['desvars','ln_cons','nl_cons','objs']

case_recorder_filename = 'sellar_optimization.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

# Derivatives are compute via finite-difference method
# to be commnented out if partial derivatives are declared
pb.model.approx_totals(method='fd', step=1e-6, form='central')






pb.setup()  
pb.run_driver()        
reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
data = {'inputs': {}, 'outputs': {} }


data['outputs']['g2'] = np.zeros((n,)+(1,))
data['outputs']['obj'] = np.zeros((n,)+(1,))
data['outputs']['g1'] = np.zeros((n,)+(1,))

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)


    data['outputs']['g2'][i,:] = case.outputs['g2']

    data['outputs']['obj'][i,:] = case.outputs['obj']

    data['outputs']['g1'][i,:] = case.outputs['g1']

      
