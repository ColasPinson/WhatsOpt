# -*- coding: utf-8 -*-
"""
  run_screening.py generated by WhatsOpt. 
"""
import numpy as np
import six
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.salib_doe_driver import SalibDoeDriver
from sellar import Sellar

pb = Problem(Sellar())
pb.driver = SalibDoeDriver(n_trajs=5, n_levels=4)
case_recorder_filename = 'sellar_screening.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

pb.model.add_design_var('x', lower=0, upper=10)
pb.model.add_design_var('z', lower=0, upper=10)

pb.model.add_objective('obj')
pb.model.add_objective('g1')
pb.model.add_objective('g2')
pb.setup()  
pb.run_driver()        
reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
data = {'inputs': {}, 'outputs': {} }

data['inputs']['x'] = np.zeros((n,)+(1,))
data['inputs']['z'] = np.zeros((n,)+(2,))

data['outputs']['obj'] = np.zeros((n,)+(1,))
data['outputs']['g1'] = np.zeros((n,)+(1,))
data['outputs']['g2'] = np.zeros((n,)+(1,))

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)
    data['inputs']['x'][i,:] = case.inputs['x']
    data['inputs']['z'][i,:] = case.inputs['z']
    data['outputs']['obj'][i,:] = case.outputs['obj']
    data['outputs']['g1'][i,:] = case.outputs['g1']
    data['outputs']['g2'][i,:] = case.outputs['g2']

from SALib.analyze import morris as ma
from SALib.plotting import morris as mp

print(data['outputs']['obj'])

Si = ma.analyze(pb.driver.pb, pb.driver._cases, data['outputs']['obj'].reshape((-1,)), print_to_console=False)
print("{:20s} {:>7s} {:>7s} {:>7s}".format("Name", "mu", "mu_star", "sigma"))
for name, s1, st, mean in zip(pb.driver.pb['names'], 
                              Si['mu'], 
                              Si['mu_star'], 
                              Si['sigma']):
    print("{:20s} {:=7.2f} {:=7.2f} {:=7.2f}".format(name, s1, st, mean))

import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(1,2)
mp.horizontal_bar_plot(ax1, Si, {})
mp.covariance_plot(ax2, Si, {})
plt.show()
