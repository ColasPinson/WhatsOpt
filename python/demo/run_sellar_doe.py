# -*- coding: utf-8 -*-
"""
  run_sellar_doe.py generated by WhatsOpt. 
"""
import numpy as np
import six
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.smt_doe_driver import SmtDoeDriver
from sellar import Sellar

def to_list(obj):
    """
    Convert object to list (so that it may be sent as JSON).
    Parameters
    ----------
    obj : object
        The object to be converted to a list.
    Returns
    -------
    list :
        Object converted to a list.
    """
    if isinstance(obj, np.ndarray):
        return to_list(obj.tolist())
    elif isinstance(obj, (list, tuple)):
        return [to_list(item) for item in obj]
    elif obj is None:
        return []
    else:
        return obj

pb = Problem(Sellar())
pb.driver = SmtDoeDriver(sampling_method='LHS', n_cases=100)
case_recorder_filename = 'sellar_doe.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

pb.model.add_design_var('x', lower=0, upper=10)
pb.model.add_design_var('z', lower=0, upper=10)
pb.model.add_objective('obj')
pb.model.add_constraint('g1')
pb.model.add_constraint('g2')

pb.setup()  
pb.run_driver()        

reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
# data = { 'inputs': {'x': np.zeros((n, 1)), 'z': np.zeros((n, 2))}, 
#          'outputs': {'obj': [], 'g1': [], 'g2': [], 'y1': [], 'y2': []} }

data = {'inputs': {}, 'outputs': {}}
data['inputs']['x'] = np.zeros((n,)+(1,))
data['inputs']['z'] = np.zeros((n,)+(2,))
data['outputs']['obj'] = np.zeros((n,)+(1,))
data['outputs']['g1'] = np.zeros((n,)+(1,))
data['outputs']['g2'] = np.zeros((n,)+(1,))
data['outputs']['y1'] = np.zeros((n,)+(1,))
data['outputs']['y2'] = np.zeros((n,)+(1,))

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)
    data['inputs']['x'][i, :] = case.inputs['x']
    data['inputs']['z'][i, :] = case.inputs['z']

    data['outputs']['obj'][i, :] = case.outputs['obj']
    data['outputs']['g1'][i, :] = case.outputs['g1']
    data['outputs']['g2'][i, :] = case.outputs['g2']
    data['outputs']['y1'][i, :] = case.outputs['y1']
    data['outputs']['y2'][i, :] = case.outputs['y2']
    
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D   
  
plt.subplot(5,3,1)
input = data['inputs']['x'].reshape((-1,))
output = data['outputs']['obj'].reshape((-1,))
plt.plot(input, output, '.')
plt.xlabel('x')
plt.ylabel('obj')


#plt.plot(data['inputs']['z'][:,0], data['outputs']['obj'], '.')
input = data['inputs']['z'].reshape((-1,))
print(data['inputs']['z'])
print(input)
print(input[0::2])
output = data['outputs']['obj'].reshape((-1,))
plt.subplot(5,3,2)
plt.plot(input[0::2], output, '.')
plt.xlabel('z[0]')
plt.ylabel('obj')

#plt.plot(data['inputs']['z'][:,1], data['outputs']['obj'], '.')
print(data['inputs']['z'])
print(input)
print(input[1::2])
plt.subplot(5,3,3)
plt.plot(input[1::2], output, '.')
plt.xlabel('z[1]')
plt.ylabel('obj')

plt.subplot(5,3,4)
plt.plot(data['inputs']['x'], data['outputs']['g1'], '.')
plt.xlabel('x')
plt.ylabel('g1')
plt.subplot(5,3,5)
plt.plot(data['inputs']['z'][:,0], data['outputs']['g1'], '.')
plt.xlabel('z[0]')
plt.ylabel('g1')
plt.subplot(5,3,6)
plt.plot(data['inputs']['z'][:,1], data['outputs']['g1'], '.')
plt.xlabel('z[1]')
plt.ylabel('g1')

plt.subplot(5,3,7)
plt.plot(data['inputs']['x'], data['outputs']['g2'], '.')
plt.xlabel('x')
plt.ylabel('g2')
plt.subplot(5,3,8)
plt.plot(data['inputs']['z'][:,0], data['outputs']['g2'], '.')
plt.xlabel('z[0]')
plt.ylabel('g2')
plt.subplot(5,3,9)
plt.plot(data['inputs']['z'][:,1], data['outputs']['g2'], '.')
plt.xlabel('z[1]')
plt.ylabel('g2')

plt.subplot(5,3,10)
plt.plot(data['inputs']['x'], data['outputs']['y1'], '.')
plt.xlabel('x')
plt.ylabel('y1')
plt.subplot(5,3,11)
plt.plot(data['inputs']['z'][:,0], data['outputs']['y1'], '.')
plt.xlabel('z[0]')
plt.ylabel('y1')
plt.subplot(5,3,12)
plt.plot(data['inputs']['z'][:,1], data['outputs']['y1'], '.')
plt.xlabel('z[1]')
plt.ylabel('Y1')

plt.subplot(5,3,13)
plt.plot(data['inputs']['x'], data['outputs']['y2'], '.')
plt.xlabel('x')
plt.ylabel('y2')
plt.subplot(5,3,14)
plt.plot(data['inputs']['z'][:,0], data['outputs']['y2'], '.')
plt.xlabel('z[0]')
plt.ylabel('y2')
plt.subplot(5,3,15)
plt.plot(data['inputs']['z'][:,1], data['outputs']['y2'], '.')
plt.xlabel('z[1]')
plt.ylabel('y2')

plt.show()
