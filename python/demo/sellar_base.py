# -*- coding: utf-8 -*-
"""
  sellar_base.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 44

import numpy as np
from openmdao.api import Problem, Group
from openmdao.api import IndepVarComp
from openmdao.api import NonlinearBlockGS, ScipyKrylov

from discipline1 import Discipline1
from discipline2 import Discipline2
from functions import Functions

class SellarBase(Group):
    """ An OpenMDAO base component to encapsulate Sellar MDA """
    
    def setup(self): 
    
        
        indeps = self.add_subsystem('indeps', IndepVarComp(), promotes=['*'])
		
        indeps.add_output('x', 2.)
        indeps.add_output('z', [5., 2.])		    
 		
 		
        self.add_subsystem('Discipline1', Discipline1(), promotes=['x', 'y2', 'z', 'y1'])
        self.add_subsystem('Discipline2', Discipline2(), promotes=['y2', 'y1', 'z'])
        self.add_subsystem('Functions', Functions(), promotes=['x', 'y1', 'y2', 'z', 'obj', 'g1', 'g2'])         

        self.nonlinear_solver = NonlinearBlockGS() 
        self.linear_solver = ScipyKrylov()

# if __name__ == "__main__":
#     from openmdao.api import view_model
#     from optparse import OptionParser
# 
#     parser = OptionParser()
#     parser.add_option("-n", "--no-n2", action="store_false", dest='n2_view', default=True, 
#                       help="display N2 openmdao viewer")
#     (options, args) = parser.parse_args()
# 
#     problem = Problem()
#     problem.model = SellarBase()
# 
#     problem.setup()
#     problem.final_setup()
#     
#     if options.n2_view:
#         view_model(problem)
    