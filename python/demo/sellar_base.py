# -*- coding: utf-8 -*-
"""
  sellar_base.py generated by WhatsOpt. 
"""
# DO NOT EDIT unless you not what you are doing
# analyses: 109

import numpy as np
from openmdao.api import Problem, Group
from openmdao.api import IndepVarComp
from openmdao.api import NonlinearBlockGS, ScipyKrylov

from disc1 import Disc1
from disc2 import Disc2
from functions import Functions

class SellarBase(Group):
    """ An OpenMDAO base component to encapsulate Sellar MDA """
    
    def setup(self): 
    
        
        indeps = self.add_subsystem('indeps', IndepVarComp(), promotes=['*'])
		
        indeps.add_output('x', 2)
        indeps.add_output('z', [5, 2])		    
 		
 		
        self.add_subsystem('Disc1', Disc1(), promotes=['y1', 'y2', 'x', 'z'])
        self.add_subsystem('Disc2', Disc2(), promotes=['y1', 'y2', 'z'])
        self.add_subsystem('Functions', Functions(), promotes=['z', 'y1', 'y2', 'obj', 'g1', 'g2', 'x'])         

        self.nonlinear_solver = NonlinearBlockGS() 
        self.linear_solver = ScipyKrylov()

# if __name__ == "__main__":
#     from openmdao.api import view_model
#     from optparse import OptionParser
# 
#     parser = OptionParser()
#     parser.add_option("-n", "--no-n2", action="store_false", dest='n2_view', default=True, 
#                       help="display N2 openmdao viewer")
#     (options, args) = parser.parse_args()
# 
#     problem = Problem()
#     problem.model = SellarBase()
# 
#     problem.setup()
#     problem.final_setup()
#     
#     if options.n2_view:
#         view_model(problem)
    