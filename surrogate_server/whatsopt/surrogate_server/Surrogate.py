#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create_analysis_surrogate(self, analysis_id, x, ynames, y):
        """
        Parameters:
         - analysis_id
         - x
         - ynames
         - y
        """
        pass

    def predict_values(self, analysis_id, yname, x):
        """
        Parameters:
         - analysis_id
         - yname
         - x
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create_analysis_surrogate(self, analysis_id, x, ynames, y):
        """
        Parameters:
         - analysis_id
         - x
         - ynames
         - y
        """
        self.send_create_analysis_surrogate(analysis_id, x, ynames, y)
        self.recv_create_analysis_surrogate()

    def send_create_analysis_surrogate(self, analysis_id, x, ynames, y):
        self._oprot.writeMessageBegin('create_analysis_surrogate', TMessageType.CALL, self._seqid)
        args = create_analysis_surrogate_args()
        args.analysis_id = analysis_id
        args.x = x
        args.ynames = ynames
        args.y = y
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_analysis_surrogate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_analysis_surrogate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def predict_values(self, analysis_id, yname, x):
        """
        Parameters:
         - analysis_id
         - yname
         - x
        """
        self.send_predict_values(analysis_id, yname, x)
        return self.recv_predict_values()

    def send_predict_values(self, analysis_id, yname, x):
        self._oprot.writeMessageBegin('predict_values', TMessageType.CALL, self._seqid)
        args = predict_values_args()
        args.analysis_id = analysis_id
        args.yname = yname
        args.x = x
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_predict_values(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = predict_values_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "predict_values failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create_analysis_surrogate"] = Processor.process_create_analysis_surrogate
        self._processMap["predict_values"] = Processor.process_predict_values

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_analysis_surrogate(self, seqid, iprot, oprot):
        args = create_analysis_surrogate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_analysis_surrogate_result()
        try:
            self._handler.create_analysis_surrogate(args.analysis_id, args.x, args.ynames, args.y)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_analysis_surrogate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_predict_values(self, seqid, iprot, oprot):
        args = predict_values_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = predict_values_result()
        try:
            result.success = self._handler.predict_values(args.analysis_id, args.yname, args.x)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("predict_values", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_analysis_surrogate_args(object):
    """
    Attributes:
     - analysis_id
     - x
     - ynames
     - y
    """


    def __init__(self, analysis_id=None, x=None, ynames=None, y=None,):
        self.analysis_id = analysis_id
        self.x = x
        self.ynames = ynames
        self.y = y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.analysis_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = []
                        (_etype9, _size6) = iprot.readListBegin()
                        for _i10 in range(_size6):
                            _elem11 = iprot.readDouble()
                            _elem5.append(_elem11)
                        iprot.readListEnd()
                        self.x.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.ynames = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ynames.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.y = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readDouble()
                        self.y.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_analysis_surrogate_args')
        if self.analysis_id is not None:
            oprot.writeFieldBegin('analysis_id', TType.STRING, 1)
            oprot.writeString(self.analysis_id.encode('utf-8') if sys.version_info[0] == 2 else self.analysis_id)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.x))
            for iter24 in self.x:
                oprot.writeListBegin(TType.DOUBLE, len(iter24))
                for iter25 in iter24:
                    oprot.writeDouble(iter25)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ynames is not None:
            oprot.writeFieldBegin('ynames', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.ynames))
            for iter26 in self.ynames:
                oprot.writeString(iter26.encode('utf-8') if sys.version_info[0] == 2 else iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.y))
            for iter27 in self.y:
                oprot.writeDouble(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_analysis_surrogate_args)
create_analysis_surrogate_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'analysis_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'x', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
    (3, TType.LIST, 'ynames', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'y', (TType.DOUBLE, None, False), None, ),  # 4
)


class create_analysis_surrogate_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_analysis_surrogate_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_analysis_surrogate_result)
create_analysis_surrogate_result.thrift_spec = (
)


class predict_values_args(object):
    """
    Attributes:
     - analysis_id
     - yname
     - x
    """


    def __init__(self, analysis_id=None, yname=None, x=None,):
        self.analysis_id = analysis_id
        self.yname = yname
        self.x = x

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.analysis_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.yname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.x = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = []
                        (_etype37, _size34) = iprot.readListBegin()
                        for _i38 in range(_size34):
                            _elem39 = iprot.readDouble()
                            _elem33.append(_elem39)
                        iprot.readListEnd()
                        self.x.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('predict_values_args')
        if self.analysis_id is not None:
            oprot.writeFieldBegin('analysis_id', TType.STRING, 1)
            oprot.writeString(self.analysis_id.encode('utf-8') if sys.version_info[0] == 2 else self.analysis_id)
            oprot.writeFieldEnd()
        if self.yname is not None:
            oprot.writeFieldBegin('yname', TType.STRING, 2)
            oprot.writeString(self.yname.encode('utf-8') if sys.version_info[0] == 2 else self.yname)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.x))
            for iter40 in self.x:
                oprot.writeListBegin(TType.DOUBLE, len(iter40))
                for iter41 in iter40:
                    oprot.writeDouble(iter41)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(predict_values_args)
predict_values_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'analysis_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'yname', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'x', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
)


class predict_values_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readDouble()
                        self.success.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('predict_values_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.DOUBLE, len(self.success))
            for iter48 in self.success:
                oprot.writeDouble(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(predict_values_result)
predict_values_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.DOUBLE, None, False), None, ),  # 0
)
fix_spec(all_structs)
del all_structs

