# -*- coding: utf-8 -*-
"""
  run_sellar_doe.py generated by WhatsOpt. 
"""
import numpy as np
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.smt_doe_driver import SmtDoeDriver
from sellar import Sellar

def to_list(obj):
    """
    Convert object to list (so that it may be sent as JSON).
    Parameters
    ----------
    obj : object
        The object to be converted to a list.
    Returns
    -------
    list :
        Object converted to a list.
    """
    if isinstance(obj, np.ndarray):
        return to_list(obj.tolist())
    elif isinstance(obj, (list, tuple)):
        return [to_list(item) for item in obj]
    elif obj is None:
        return []
    else:
        return obj

pb = Problem(Sellar())
pb.driver = SmtDoeDriver(sampling_method='LHS', n_cases=10)
case_recorder_filename = 'sellar_doe.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

pb.model.add_design_var('x', lower=0, upper=10)
pb.model.add_design_var('z', lower=0, upper=10)
pb.model.add_objective('obj')
pb.model.add_constraint('g1')
pb.model.add_constraint('g2')

pb.setup()  
pb.run_driver()        

reader = CaseReader(case_recorder_filename)
data = { 'inputs': {'x': [], 'z': []}, 'outputs': {'obj': [], 'g1': [], 'g2': []} }

for case_id in reader.system_cases.list_cases():
    case = reader.system_cases.get_case(case_id)
    data['inputs']['x'].append(to_list(case.inputs['x']))
    data['inputs']['z'].append(to_list(case.inputs['z']))

for case_id in reader.system_cases.list_cases():
    case = reader.system_cases.get_case(case_id)
    data['outputs']['obj'].append(to_list(case.outputs['obj']))
    data['outputs']['g1'].append(to_list(case.outputs['g1']))
    data['outputs']['g2'].append(to_list(case.outputs['g2']))
    
