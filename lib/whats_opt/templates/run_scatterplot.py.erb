import numpy as np
import matplotlib.pyplot as plt
from openmdao.api import Problem, SqliteRecorder, CaseReader
from whatsopt.smt_doe_driver import SmtDoeDriver
from <%= @mda.py_modulename %> import <%= @mda.py_classname %>

pb = Problem(<%= @mda.py_classname %>())
pb.driver = SmtDoeDriver(sampling_method='LHS', n_cases=100)
case_recorder_filename = '<%= @mda.py_modulename %>_scatterplot.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
pb.model.add_recorder(recorder)
pb.model.nonlinear_solver.add_recorder(recorder)

<%- @mda.indep_variables.each do |dv| %>
pb.model.add_design_var('<%= dv.name %>', lower=<%= dv.lower_py_value %>, upper=<%= dv.upper_py_value %>)<% end %>
<% @mda.response_variables.each do |voi| %>
pb.model.add_objective('<%= voi.name %>')<% end %>
pb.setup()  
pb.run_driver()        
reader = CaseReader(case_recorder_filename)
cases = reader.system_cases.list_cases()
n = len(cases)
data = {'inputs': {}, 'outputs': {} }
<% @mda.indep_variables.each do |dv| %>
data['inputs']['<%= dv.name %>'] = np.zeros((n,)+<%= dv.shape=="1"?"(1,)":dv.shape %>)<% end %>
<% @mda.response_variables.each do |r| %>
data['outputs']['<%= r.name %>'] = np.zeros((n,)+<%= r.shape=="1"?"(1,)":r.shape %>)<% end %>

for i, case_id in enumerate(cases):
    case = reader.system_cases.get_case(case_id)
<% @mda.indep_variables.each do |dv| -%>
    data['inputs']['<%= dv.name %>'][i,:] = case.inputs['<%= dv.name %>']
<% end -%>
<% @mda.response_variables.each do |r| -%>
    data['outputs']['<%= r.name %>'][i,:] = case.outputs['<%= r.name %>']
<% end -%>
      
<% row = 0 -%>
<% @mda.response_variables.each_with_index do |r, j| -%>

output = data['outputs']['<%= r.name %>'].reshape((-1, ))
<% (0...r.dim).each do |kj| -%>
<% col = 0 -%>
<% @mda.indep_variables.each_with_index do |dv, i| -%>

input = data['inputs']['<%= dv.name %>'].reshape((-1,))
<% (0...dv.dim).each do |ki| -%>
plt.subplot(<%= @mda.output_dim %>, <%= @mda.input_dim %>, <%= @mda.input_dim*row+col+1 %>)
plt.plot(input[<%= ki %>::<%= dv.dim %>], output[<%= kj %>::<%= r.dim %>], '.')
<% if col == 0 -%>
plt.ylabel('<%= r.dim==1?"#{r.name}":"#{r.name} #{kj+1}" %>')
<% end -%>
<% if true or row == @mda.output_dim-1 -%>
plt.xlabel('<%= dv.dim==1?"#{dv.name}":"#{dv.name} #{ki+1}" %>')
<% end -%>
<% col += 1 -%>
<% end -%>
<% end -%>
<% row += 1 -%>
<% end -%>

<% end -%>
plt.show()
