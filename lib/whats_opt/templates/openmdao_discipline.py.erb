import numpy as np
from openmdao.api import ExplicitComponent

class <%= @discipline.name.camelcase %>(ExplicitComponent):
    """ An OpenMDAO component to encapsulate <%= @discipline.py_classname %> discipline """

    def setup(self):
		<% @discipline.input_variables.each do |var| %>
        self.add_input('<%= var.py_varname %>', val=<%= var.default_py_value %>, desc='<%= var.escaped_desc %>')<% end %>
		<% @discipline.output_variables.each do |var| %>
        self.add_output('<%= var.py_varname %>', val=<%= var.default_py_value %>, desc='<%= var.escaped_desc %>')<% end %>
        self.declare_partials('*', '*')
		
    def compute(self, inputs, outputs):
        """ <%= @discipline.py_classname %> computation. """
    <% @discipline.output_variables.each do |var_out| %>
        outputs['<%= var_out.py_varname %>'] = <%= var_out.default_py_value %> <% end %>  
				
    def compute_partials(self, inputs, partials):
        """ Jacobian for <%= @discipline.py_classname %>."""
    <% @discipline.output_variables.each do |var_out| %>
   		<% @discipline.input_variables.each do |var_in| %>
       	partials['<%= var_out.py_varname %>', '<%= var_in.py_varname %>'] = np.zeros((<%= var_out.dim %>, <%= var_in.dim %>))<% end %><% end %>        

        