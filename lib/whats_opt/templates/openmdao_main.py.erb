import numpy as np

from openmdao.api import Group, Problem, IndepVarComp, NLGaussSeidel, ScipyGMRES
<% @mda.disciplines.plain.each do |d| %>
from <%= d.py_modulename %> import <%= d.py_classname %><% end %>

class <%= @mda.py_classname %>(Group):
    """ An OpenMDAO component to encapsulate <%= @mda.py_classname %> MDA """
    
    def __init__(self):
        super(<%= @mda.py_classname %>, self).__init__()  
		<% @mda.design_variables.each do |dv| %>
        self.add('p_<%= dv.name %>', IndepVarComp('<%= dv.name %>', <%= dv.default_py_value%>), promotes=['<%= dv.name %>'])<% end %>		    
 		<% @mda.disciplines.plain.each do |d| %>
        self.add('<%= d.py_modulename %>', <%= d.py_classname %>(), promotes=[<%= d.variables.map(&:py_varname).map{|v| "'#{v}'"}.join(', ') %>])<% end %>         

        self.nl_solver = NLGaussSeidel() 
        self.ln_solver = ScipyGMRES()

if __name__ == "__main__":
    from openmdao.api import view_tree

    top = Problem()
    root = top.root = <%= @mda.py_classname %>()
	
    top.setup()
    view_tree(top)
    