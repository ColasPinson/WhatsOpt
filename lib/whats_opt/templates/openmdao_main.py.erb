import numpy as np

from openmdao.api import Problem, Group
from openmdao.api import IndepVarComp
from openmdao.api import NonlinearBlockGS, ScipyIterativeSolver
<% @mda.disciplines.plain.each do |d| %>
from <%= d.py_modulename %> import <%= d.py_classname %><% end %>

class <%= @mda.py_classname %>(Group):
    """ An OpenMDAO component to encapsulate <%= @mda.py_classname %> MDA """
    
    def setup(self): 
		<% @mda.design_variables.each do |dv| %>
        self.add_subsystem('dv_<%= dv.name %>', IndepVarComp('<%= dv.name %>', <%= dv.default_py_value%>), promotes=['<%= dv.name %>'])<% end %>		    
 		<% @mda.disciplines.plain.each do |d| %>
        self.add_subsystem('<%= d.py_classname %>', <%= d.py_classname %>(), promotes=[<%= d.variables.map(&:py_varname).map{|v| "'#{v}'"}.join(', ') %>])<% end %>         

        self.nonlinear_solver = NonlinearBlockGS() 
        self.linear_solver = ScipyIterativeSolver()

if __name__ == "__main__":
    from openmdao.api import view_model
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("-n", "--no-n2", action="store_false", dest='n2_view', default=True, 
                      help="display N2 openmdao viewer")
    (options, args) = parser.parse_args()

    problem = Problem()
    problem.model = <%= @mda.py_classname %>()

    problem.setup()
    
    if options.n2_view:
        view_model(problem)
    