require 'erubi'
require 'tmpdir'
require 'zip'

module WhatsOpt
  
  class OpenmdaoGenerator
    
    attr_accessor :genfiles 
    
    class DisciplineNotFoundException < StandardError
    end
    
    def initialize(mda)
      @mda = mda
      @template_dir = File.join(File.dirname(__FILE__), "templates")
      @genfiles = []
    end
    
    def generate_zip_stringio
      zip_filename = '/tmp/test_mda.zip'
      stringio = nil
      Dir.mktmpdir("openmdao-#{@mda.name.downcase}-") do |dir|
        _generate_mda dir
        stringio = Zip::OutputStream.write_buffer do |zio|
          @genfiles.each do |filename|
            zio.put_next_entry(File.join(File.basename(dir), File.basename(filename)))
            File.open(filename) do |f|
              zio.write f.read
            end
          end
        end
      end
      stringio.rewind
      stringio
    end
    
    def _generate_mda(gendir)
      @mda.disciplines.each do |disc|
        _generate_discipline(disc, gendir)
      end 
      _generate_main(gendir)
    end
    
    def _generate_main gendir
      _generate("#{@mda.name.downcase}_main.py", 'openmdao_main.py.erb', gendir)
    end
    
    def _generate_discipline(disc, gendir)
      @discipline = disc
      if @discipline
        _generate("#{@discipline.name.downcase}.py", 'openmdao_discipline.py.erb', gendir)
      else
        raise DisciplineNotFoundException.new("Discipline " +
          discname + " not found in " + @mda.disciplines)
      end
    end
    
    def _generate(filename, template_filename, gendir)
      template = File.join(@template_dir, template_filename)
      Rails.logger.info "Creating #{filename} from #{File.basename(template)}"
      filepath = File.join(gendir, filename) if gendir      
      result = _comment_header(filepath)
      result += _run_template(template)
      fh = File.open(filepath, "w") 
      fh.print result
      fh.close
      @genfiles << filepath if !@genfiles.include?(filepath)
      filepath
    end
    
    def _run_template(name)
      erb = ERB.new(File.open(name, "rb").read, nil, '-')
      erb.result(binding)
    end
    
    def _comment_header(filepath)
<<HEADER
################################################################################
# -- #{File.basename(filepath)}
# Auto-generated by WhatsOpt (at least initially)
################################################################################
HEADER
    end
    
  end
  
end
